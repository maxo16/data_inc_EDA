population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs$geoid_long <- paste("1500000US", ba_bgs$blkgrpid, sep = "")
ba_bgs <- ba_bgs[,c(2,3)]
#
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
View(ba_bgs)
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Making the sf object from the data.table
sf_311_streets <- st_as_sf(sf_311_streets, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_streets <- st_join(sf_311_streets, ba_bgs["geoid_long"])
sf_311_streets_summary <- sf_311_streets %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# plot(sf_311_streets_summary["calls_bg"])
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_streets_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_streets_summary)[,1:2], by = "geoid_long")
# plot(sf_311_streets_summary_bgs["calls_bg"])
# range(sf_311_streets_summary_bgs$calls_bg, na.rm = TRUE) # Looks like some NAs are hanging around. Let me see about getting rid of those.
# This did the trick.
sf_311_streets_summary_bgs <-  sf_311_streets_summary_bgs %>% drop_na(calls_bg)
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
View(sf_311_streets_summary_bgs)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Making the sf object from the data.table
sf_311_streets <- st_as_sf(sf_311_streets, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_streets <- st_join(sf_311_streets, ba_bgs["geoid_long"])
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
sf_311_streets_summary <- sf_311_streets %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# plot(sf_311_streets_summary["calls_bg"])
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_streets_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_streets_summary)[,1:2], by = "geoid_long")
# plot(sf_311_streets_summary_bgs["calls_bg"])
# range(sf_311_streets_summary_bgs$calls_bg, na.rm = TRUE) # Looks like some NAs are hanging around. Let me see about getting rid of those.
# This did the trick.
sf_311_streets_summary_bgs <-  sf_311_streets_summary_bgs %>% drop_na(calls_bg)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(data.table)
library(dplyr)
library(treemap)
library(sf)
library(readr)
library(leaflet)
library(lubridate)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(tidyverse)
# Chunk 3
sf_311 <- fread("/Users/max/Dropbox/Data Incubator/311_Cases.csv")
sf_311 <- sf_311[,1:20]
print(1:10)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(data.table)
library(dplyr)
library(treemap)
library(sf)
library(readr)
library(leaflet)
library(lubridate)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(tidyverse)
# Chunk 3
sf_311 <- fread("/Users/max/Dropbox/Data Incubator/311_Cases.csv")
sf_311 <- sf_311[,1:20]
# Chunk 4
#Let me see if I can't get it to work with the dates as is.
mdy_hms(sf_311$Opened[1:10], tz = "US/Pacific")
sf_311$Opened <- mdy_hms(sf_311$Opened, tz = "US/Pacific")
sf_311$Closed <- mdy_hms(sf_311$Closed, tz = "US/Pacific")
# Looks like the tidyverse solutions might be slower, sometimes, they're definitely faster at other times. However, I think the tradeoff in the easier syntax is worth it, though.
sf_311 <- sf_311 %>% drop_na(Closed)
# Filter out coordinates that are clearly wrong.
sf_311 <- sf_311 %>% filter(Longitude >= -123 & Longitude <= -122 & Latitude >= 37.7 & Latitude <= 38)
# Chunk 5
# Lesson learned is, when doing something, search for a tidyverse solution.
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category <- summary_by_category %>% arrange(-category_summary)
summary_by_category <- summary_by_category %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Chunk 6
# Tree map of all
treemap(summary_by_category, index = "Category", vSize = "pct_of_total", type = "index", title = "Percent of Total Calls")
# Tree map of top 10
treemap(summary_by_category[1:10,], index = "Category", vSize = "pct_of_total", type = "index", title = "Percent of Total Calls, Top 10")
# Chunk 7
sf_311 <- sf_311 %>% filter(Category %in% summary_by_category$Category[1:4])
# Chunk 8
sf_311_streets <- sf_311 %>% filter(Category == "Street and Sidewalk Cleaning")
# This orders the data frame by date.
sf_311_streets <- arrange(sf_311_streets, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_streets <- sf_311_streets %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
# This is just a good column to have, makes sorting based on statistical criteria a little easier.
sf_311_streets <- sf_311_streets %>% mutate(diff_z_score = scale(diff_secs))
# Chunk 9
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
# Chunk 10
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Chunk 11
# Making the sf object from the data.table
sf_311_streets <- st_as_sf(sf_311_streets, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_streets <- st_join(sf_311_streets, ba_bgs["geoid_long"])
# Chunk 12
# Would probably be good to keep in mind for further analysis.
sf_311_streets %>% group_by(`Request Details`) %>% summarize(n())
# Chunk 13
sf_311_streets_summary <- sf_311_streets %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_streets_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_streets_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_streets_summary_bgs <-  sf_311_streets_summary_bgs %>% drop_na(calls_bg)
# Chunk 14
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
# Chunk 15
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
rm(list = ls())
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(data.table)
library(dplyr)
library(treemap)
library(sf)
library(readr)
library(leaflet)
library(lubridate)
library(htmltools)
library(ggplot2)
library(ggthemes)
library(tidyverse)
# Chunk 3
sf_311 <- fread("/Users/max/Dropbox/Data Incubator/311_Cases.csv")
sf_311 <- sf_311[,1:20]
# Chunk 4
#Let me see if I can't get it to work with the dates as is.
mdy_hms(sf_311$Opened[1:10], tz = "US/Pacific")
sf_311$Opened <- mdy_hms(sf_311$Opened, tz = "US/Pacific")
sf_311$Closed <- mdy_hms(sf_311$Closed, tz = "US/Pacific")
# Looks like the tidyverse solutions might be slower, sometimes, they're definitely faster at other times. However, I think the tradeoff in the easier syntax is worth it, though.
sf_311 <- sf_311 %>% drop_na(Closed)
# Filter out coordinates that are clearly wrong.
sf_311 <- sf_311 %>% filter(Longitude >= -123 & Longitude <= -122 & Latitude >= 37.7 & Latitude <= 38)
# Chunk 5
# Lesson learned is, when doing something, search for a tidyverse solution.
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category <- summary_by_category %>% arrange(-category_summary)
summary_by_category <- summary_by_category %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Chunk 6
# Tree map of all
treemap(summary_by_category, index = "Category", vSize = "pct_of_total", type = "index", title = "Percent of Total Calls")
# Tree map of top 10
treemap(summary_by_category[1:10,], index = "Category", vSize = "pct_of_total", type = "index", title = "Percent of Total Calls, Top 10")
sf_311 <- sf_311 %>% filter(Category %in% summary_by_category$Category[1:4])
x <- 2
source("histo_helper.R")
kitty <- summary_by_category$Category[1]
kitty
sf_311_kitty <- sf_311 %>% filter(Category == "Street and Sidewalk Cleaning")
# This orders the data frame by date.
sf_311_kitty <- arrange(sf_311_kitty, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_kitty <- sf_311_kitty %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
# This is just a good column to have, makes sorting based on statistical criteria a little easier.
sf_311_kitty <- sf_311_kitty %>% mutate(diff_z_score = scale(diff_secs))
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_kitty, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
rm(x)
sf_311_kitty <- sf_311 %>% filter(Category == kitty)
# This orders the data frame by date.
sf_311_kitty <- arrange(sf_311_kitty, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_kitty <- sf_311_kitty %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
# This is just a good column to have, makes sorting based on statistical criteria a little easier.
sf_311_kitty <- sf_311_kitty %>% mutate(diff_z_score = scale(diff_secs))
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_kitty, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
rm(sf_311_kitty)
kitty <- summary_by_category$Category[1]
# Creates the filtered data frame.
sf_311_kitty <- sf_311 %>% filter(Category == kitty)
# The "math" for the histogram
# This orders the data frame by date.
sf_311_kitty <- arrange(sf_311_kitty, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_kitty <- sf_311_kitty %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
# This is just a good column to have, makes sorting based on statistical criteria a little easier.
sf_311_kitty <- sf_311_kitty %>% mutate(diff_z_score = scale(diff_secs))
# Code that creates the actual histogram.
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_kitty, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
kitty <- summary_by_category$Category[2]
kitty
# Creates the filtered data frame.
sf_311_kitty <- sf_311 %>% filter(Category == kitty)
# The "math" for the histogram
# This orders the data frame by date.
sf_311_kitty <- arrange(sf_311_kitty, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_kitty <- sf_311_kitty %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
# This is just a good column to have, makes sorting based on statistical criteria a little easier.
sf_311_kitty <- sf_311_kitty %>% mutate(diff_z_score = scale(diff_secs))
# Code that creates the actual histogram.
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_kitty, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Making the sf object from the data.table
sf_311_kitty <- st_as_sf(sf_311_kitty, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_kitty <- st_join(sf_311_kitty, ba_bgs["geoid_long"])
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary_bgs <-  sf_311_kitty_summary_bgs %>% drop_na(calls_bg)
binpal <- colorBin("Oranges", sf_311_kitty_summary_bgs$calls_bg, 9, pretty = FALSE)
leaflet(sf_311_kitty_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Making the sf object from the data.table
sf_311_kitty <- st_as_sf(sf_311_kitty, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_kitty <- st_join(sf_311_kitty, ba_bgs["geoid_long"])
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary <-  sf_311_kitty_summary %>% drop_na(calls_bg)
binpal <- colorBin("Oranges", sf_311_kitty_summary$calls_bg, 9, pretty = FALSE)
# Would probably be good to keep in mind for further analysis.
sf_311_kitty %>% group_by(`Request Details`) %>% summarize(n())
leaflet(sf_311_kitty_summary) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary_bgs <-  sf_311_kitty_summary_bgs %>% drop_na(calls_bg)
leaflet(sf_311_kitty_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
View(sf_311_kitty)
View(sf_311_kitty_summary)
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary <-  sf_311_kitty_summary %>% drop_na(calls_bg)
binpal <- colorBin("Oranges", sf_311_kitty_summary$calls_bg, 9, pretty = FALSE)
leaflet(sf_311_kitty_summary) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
rm(sf_311_kitty_summary)
rm(sf_311_kitty_summary_bgs)
rm(sf_311_kitty)
# Creates the filtered data frame.
sf_311_kitty <- sf_311 %>% filter(Category == kitty)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Chunk 10
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Chunk 11
# Making the sf object from the data.table
sf_311_kitty <- st_as_sf(sf_311_kitty, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_kitty <- st_join(sf_311_kitty, ba_bgs["geoid_long"])
# Chunk 12
# Would probably be good to keep in mind for further analysis.
sf_311_kitty %>% group_by(`Request Details`) %>% summarize(n())
# Chunk 13
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary <-  sf_311_kitty_summary %>% drop_na(calls_bg)
# Chunk 14
binpal <- colorBin("Oranges", sf_311_kitty_summary$calls_bg, 9, pretty = FALSE)
# Chunk 15
leaflet(sf_311_kitty_summary) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Chunk 10
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
# Don't think I need any of this now because it was for the population data. Just comment out and see if the assets are recreated.
ba_bgs <- ba_bgs[,c(6,10)] #Don't really need the id's but may as well keep them so I have a unique identifier for each row.
ba_bgs <- ba_bgs %>% mutate(geoid_long = paste("1500000US", blkgrpid, sep = ""))
ba_bgs <- ba_bgs[,c(2,3)]
# This is where it filters to just block groups in SF, I'll just keep this and rename things accordingly.
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
# Chunk 11
# Making the sf object from the data.table
sf_311_kitty <- st_as_sf(sf_311_kitty, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_kitty <- st_join(sf_311_kitty, ba_bgs["geoid_long"])
# Chunk 12
# Would probably be good to keep in mind for further analysis.
sf_311_kitty %>% group_by(`Request Details`) %>% summarize(n())
# Chunk 13
sf_311_kitty_summary <- sf_311_kitty %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
# Join it back to the bgs then plot. Have to join it to the sf object,
sf_311_kitty_summary <- ba_bgs %>% left_join(as.data.frame(sf_311_kitty_summary)[,1:2], by = "geoid_long")
# This did the trick.
sf_311_kitty_summary <-  sf_311_kitty_summary %>% drop_na(calls_bg)
# Chunk 14
binpal <- colorBin("Oranges", sf_311_kitty_summary$calls_bg, 9, pretty = FALSE)
# Chunk 15
leaflet(sf_311_kitty_summary) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
rm(list = ls())
