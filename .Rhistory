range(filter(sf_311_streets_summary_bgs, z_score <= 2)$z_score)
sf_311_streets_summary_bgs$z_score <- scale(sf_311_streets_summary_bgs$calls_bg)
range(filter(sf_311_streets_summary_bgs, z_score <= 2)$z_score)
hist(sf_311_streets_summary_bgs$calls_bg)
hist(filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg)
hist(filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg, title = "Count of Calls Per BG")
hist(filter(sf_311_streets_summary_bgs, z_score <= 1.96)$calls_bg)
hist(filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg)
hist(filter(sf_311_streets_summary_bgs, z_score <= 1.96)$calls_bg)
warnings()
hist(filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons()
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons()
pal_red <- colorNumeric(
palette = "reds",
domain = filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg
)
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(calls_bg))
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal_red(calls_bg))
pal_red <- colorNumeric(
palette = "Reds",
domain = filter(sf_311_streets_summary_bgs, z_score <= 2)$calls_bg
)
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal_red(calls_bg))
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal_red(calls_bg))
library(data.table)
library(dplyr)
library(treemap)
library(sf)
library(readr)
library(leaflet)
library(lubridate)
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$Stamen.Toner) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal_red(calls_bg))
leaflet(filter(sf_311_streets_summary_bgs, z_score <= 2)) %>%
addProviderTiles(providers$CartoDB.Positron) %>% addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal_red(calls_bg))
?colorBin
binpal <- coloBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 10, pretty = FALSE)
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 10, pretty = FALSE)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = binpal(calls_bg))
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg))
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
)
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>%
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
)
library(htmltools)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng = 37.59, lat = -122.44, zoom = 12)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.59, zoom = 12)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.759, zoom = 12)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 12)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 10)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 11)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 11)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
View(sf_311)
#Let me see if I can't get it to work with the dates as is.
sf_311$Opened[1]
#Let me see if I can't get it to work with the dates as is.
mdy_hms(sf_311$Opened[1])
?mdy_hms
OlsonNames()
#Let me see if I can't get it to work with the dates as is.
mdy_hms(sf_311$Opened[1], tz = "US/Pacific")
#Let me see if I can't get it to work with the dates as is.
mdy_hms(sf_311$Opened[1:10], tz = "US/Pacific")
sf_311$Opened <- mdy_hms(sf_311$Opened, tz = "US/Pacific")
sf_311$Closed <- mdy_hms(sf_311$Closed, tz = "US/Pacific")
warnings()
sf_311$Opened[1]
class(sf_311$Opened[1])
typeof(sf_311$Opened[1])
# Looks like in the closed category there are some NAs, just remove these rows.
sf_311 <- sf_311[!is.na(sf_311$Closed),]
sf_311$Opened[1] - sf_311$Opened[2]
(sf_311$Opened[1] - sf_311$Opened[2])/2
mean(c(sf_311$Opened[1] - sf_311$Opened[2],sf_311$Opened[2] - sf_311$Opened[3]))
c(sf_311$Opened[1] - sf_311$Opened[2],sf_311$Opened[2] - sf_311$Opened[3])
hist(c(sf_311$Opened[1] - sf_311$Opened[2],sf_311$Opened[2] - sf_311$Opened[3]))
View(sf_311_streets)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
# Let's make a percent of total column to get a better sense of what's going on.
summary_by_category$pct_of_total <- (summary_by_category$category_summary/sum(summary_by_category$category_summary))*100
summary_by_category <- summary_by_category[order(-summary_by_category$pct_of_total),]
summary_by_category$cumsum <- cumsum(summary_by_category$pct_of_total)
# The dataset is fairly large and I don't need it all, let me filter down to the top four categories. Hmmm, the RData file is still pretty big. Maybe worry about this when I start to make the presentation.
sf_311 <- sf_311 %>% filter(Category %in% summary_by_category$Category[1:4])
sf_311_streets <- sf_311 %>% filter(Category == "Street and Sidewalk Cleaning")
# Making the sf object from the data.table
sf_311_streets <- st_as_sf(sf_311_streets, coords = c("Longitude", "Latitude"), crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Doing the spatial join to get block group data to each call
sf_311_streets <- st_join(sf_311_streets, ba_bgs["geoid_long"])
# Adding back in lat and long because it's just easier when plotting in leaflet. Although, it takes too long to plot all of the points so I won't end up doing it but this can just stay here for now.
sf_311_streets <- sf_311_streets %>% left_join(sf_311[,c(1,16,17)], by = "CaseID")
# Filter out coordinates that are clearly wrong.
sf_311_streets <- sf_311_streets %>% filter(Longitude >= -123 & Longitude <= -122 & Latitude >= 37.7 & Latitude <= 38)
sf_311_streets_summary <- sf_311_streets %>% group_by(geoid_long) %>% summarize("calls_bg" = n())
plot(sf_311_streets_summary["calls_bg"])
# Join it back to the bgs then plot.
sf_311_streets_summary_bgs <- ba_bgs %>% left_join(as.data.frame(sf_311_streets_summary)[,1:2], by = "geoid_long")
plot(sf_311_streets_summary_bgs["calls_bg"])
range(sf_311_streets_summary_bgs$calls_bg, na.rm = TRUE) # Looks like some NAs are hanging around. Let me see about getting rid of those.
# This did the trick.
sf_311_streets_summary_bgs <- sf_311_streets_summary_bgs[!is.na(sf_311_streets_summary_bgs$calls_bg),]
plot(sf_311_streets_summary_bgs["calls_bg"])
binpal <- colorBin("Oranges", sf_311_streets_summary_bgs$calls_bg, 9, pretty = FALSE)
ba_bgs <- st_read("/Users/max/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/sf_bay_clipped/2e262912-207a-4424-9e17-08041688d59c202044-1-130emnv.fypm.shp")
population_data_bgs <- read_csv("~/Dropbox/Stanford Stuff/Classes/PUBLPOL/Y23 Spring 2020/Thesis/Data/population_data_bgs.csv")
ba_bgs <- ba_bgs[,c(6,10)]
ba_bgs$geoid_long <- paste("1500000US", ba_bgs$blkgrpid, sep = "")
ba_bgs <- ba_bgs[,c(2,3)]
ba_bgs <- ba_bgs %>% filter(geoid_long %in% population_data_bgs$id)
leaflet(sf_311_streets_summary_bgs) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1, color = ~binpal(calls_bg), popup = ~htmlEscape(calls_bg)) %>%
addLegend("bottomright", pal = binpal, values = ~calls_bg,
title = "Total Calls Per Block",
opacity = 1
) %>% setView(lng =-122.44, lat = 37.758, zoom = 13)
object.size(sf_311_streets)
object.size(sf_311_streets, units = "MB")
format(object.size(sf_311_streets), units = "MB")
save(sf_311_streets, file = "sf_311_streets")
range(sf_311_streets$Opened)
arrange(sf_311_streets, Opened)
sf_311_streets <- arrange(sf_311_streets, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_streets <- sf_311_streets %>% mutate(time_diff = Opened - lag(Opened))
hist(sf_311_streets$time_diff)
# This orders the data frame by date.
sf_311_streets <- arrange(sf_311_streets, Opened)
# Create a lag variable between calls. That's the next thing I'm interested in.
sf_311_streets <- sf_311_streets %>% mutate(time_diff = Opened - lag(Opened), diff_secs = as.numeric(time_diff, units = 'secs'))
hist(sf_311_streets$diff_secs)
range(sf_311_streets$diff_secs)
range(sf_311_streets$diff_secs, na.rm = TRUE)
143184/3600
sf_311_streets <- sf_311_streets %>% mutate(diff_z_score = scale(diff_secs))
hist(filter(sf_311_streets, diff_z_score <= 2)$diff_secs)
mean(sf_311_streets$diff_secs, na.rm = TRUE)
median(sf_311_streets$diff_secs, na.rm = TRUE)
range(sf_311_streets$diff_secs, na.rm = TRUE)
143184/3600
range(filter(sf_311_streets, diff_z_score <= 2)$diff_secs)
mean  (mean(sf_311_streets$diff_secs, na.rm = TRUE), na.rm = TRUE)
mean(mean(sf_311_streets$diff_secs, na.rm = TRUE), na.rm = TRUE)
median(median(sf_311_streets$diff_secs, na.rm = TRUE), na.rm = TRUE)
mean(sf_311_streets$diff_secs, na.rm = TRUE)
median(sf_311_streets$diff_secs, na.rm = TRUE)
mean(filter(sf_311_streets, diff_z_score <= 2)$diff_secs, na.rm = TRUE)
median(filter(sf_311_streets, diff_z_score <= 2)$diff_secs, na.rm = TRUE)
install.packages("ggthemes")
library(ggplot2)
library(ggthemes)
hist(filter(sf_311_streets, diff_z_score <= 1)$diff_secs)
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 5,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Mean ozone in\nparts per billion",
breaks = seq(0, 175, 25),
limits=c(0, 175)) +
scale_y_continuous(name = "Count") +
ggtitle("Frequency histogram of mean ozone") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
1200/60
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 60),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count") +
ggtitle("Frequency histogram of time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "s"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 60),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count") +
ggtitle("Frequency histogram of time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count") +
ggtitle("Frequency histogram of time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = comma) +
ggtitle("Frequency histogram of time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of\n time between service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma"),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
barfill <- "#4271AE"
barlines <- "#1F3552"
p7 <- ggplot(sf_311_streets, aes(x = diff_secs)) +
geom_histogram(aes(y = ..count..), binwidth = 60,
colour = barlines, fill = barfill) +
scale_x_continuous(name = "Time between service call",
breaks = seq(0, 1200, 120),
limits=c(0, 1200)) +
scale_y_continuous(name = "Count", labels = scales::comma) +
ggtitle("Frequency histogram of time \nbetween service calls") +
theme_economist() +
theme(legend.position = "bottom", legend.direction = "horizontal",
legend.box = "horizontal",
legend.key.size = unit(1, "cm"),
plot.title = element_text(family="Tahoma"),
text = element_text(family = "Tahoma", hjust = 0.5),
axis.title = element_text(size = 12),
legend.text = element_text(size = 9),
legend.title=element_text(face = "bold", size = 9))
p7
rm(list = ls())
save.image()
R
1:10
library(data.table)
library(dplyr)
library(treemap)
library(sf)
library(readr)
library(leaflet)
library(lubridate)
library(htmltools)
library(ggplot2)
library(ggthemes)
sf_311 <- fread("/Users/max/Dropbox/Data Incubator/311_Cases.csv")
sf_311 <- sf_311[,1:20]
print(1:10)
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
# Let's make a percent of total column to get a better sense of what's going on.
summary_by_category$pct_of_total <- (summary_by_category$category_summary/sum(summary_by_category$category_summary))*100
summary_by_category <- summary_by_category[order(-summary_by_category$pct_of_total),]
summary_by_category$cumsum <- cumsum(summary_by_category$pct_of_total)
View(sf_311)
View(summary_by_category)
# Let me try this with the mutate function, could be a lot cleaner.
summary_by_category2 <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category2 <- summary_by_category2 %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
View(summary_by_category2)
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
# Let me try this with the mutate function, could be a lot cleaner.
summary_by_category2 <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
View(summary_by_category)
View(summary_by_category2)
summary_by_category2 <- summary_by_category2 %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Let's make a percent of total column to get a better sense of what's going on.
summary_by_category$pct_of_total <- (summary_by_category$category_summary/sum(summary_by_category$category_summary))*100
summary_by_category <- summary_by_category[order(-summary_by_category$pct_of_total),]
summary_by_category$cumsum <- cumsum(summary_by_category$pct_of_total)
# Let me try this with the mutate function, could be a lot cleaner.
summary_by_category2 <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category2 <- summary_by_category2[order(-summary_by_category2$pct_of_total),]
summary_by_category2 <- summary_by_category2 %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Let me try this with the mutate function, could be a lot cleaner.
summary_by_category2 <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category2 <- summary_by_category2[order(-summary_by_category2$category_summary),]
summary_by_category2 <- summary_by_category2 %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Let me try this with the mutate function, could be a lot cleaner. It is.
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category <- summary_by_category %>% arrange(category_summary)
summary_by_category <- summary_by_category %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Let me try this with the mutate function, could be a lot cleaner. It is.
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category <- summary_by_category %>% arrange(-category_summary)
summary_by_category <- summary_by_category %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
# Let me try this with the mutate function, could be a lot cleaner. It is. The arrange function is cleaner too, I should definitely, from now on, start with tidyverse searches to find solutions.
summary_by_category <- sf_311 %>% group_by(Category) %>% summarize("category_summary" = n())
summary_by_category <- summary_by_category %>% arrange(-category_summary)
summary_by_category <- summary_by_category %>% mutate(pct_of_total = (category_summary/sum(category_summary))*100, cumpct = cumsum(pct_of_total))
rm(list = ls())
